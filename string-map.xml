<root>
	<title>Trie-Based Maps Library</title>
	<prose>
		This is an implementation of type-safe
		trie-based maps for the C programming
		language.
	</prose>
	<prose>
		Although most of the time tries are
		thought to be mapping strings to values
		this library takes the perspective of them 
		mapping arbitrary sequences of bytes to values.
	</prose>
	
	<section id='library-structure'>
		<title>Library Structure</title>
		<prose>
			The library is composed of a single
			C header file.
		</prose>
		<prose>
			This header in turn contains a single
			macro definition, which upon invocation
			generates a struct definition and multiple
			supporting function definitions which in
			conjunction define a trie map for a specific
			value type.
		</prose>
		<deftext id='trie_map.h' file='trie_map.h'>
			<reftext>
				#pragma once
				<insert text='trie_map:includes'/>
				<insert text='trie_map:macro'/>
			</reftext>
		</deftext>
	</section>
	<deftext id='trie_map:includes'>
		<title>trie_map Includes</title>
		<reftext>
		</reftext>
	</deftext>

	<deftext id='trie_map:macro'>
		<title>trie_map DEFINE_STRING_MAP Macro</title>
		<prose>
			This is the definition of the main
			macro that composes this library:
			The DEFINE_STRING_MAP, which upon
			invocation defines a struct with the 
			given name, that represents nodes of 
			a trie that maps sequences of bytes
			to values of the given value type, and 
			also a set of functions to query
			and manipulate this trie.
		</prose>
		<prose>
			The macro definition is opened.
		</prose>
		<reftext>
			#define DEFINE_STRING_MAP(name, value_type)\
		</reftext>
		<prose>
			The part of the macro that defines a
			struct representing a single node of the trie
			follows. Each of these nodes can hold a value
			and an edge to another node for every
			possible byte, which is to say 256 possible
			edges to other nodes.
		</prose>
		<reftext>\
			struct name {\
				value_type value;\
				bool has_value;\
				struct name *transition[256];\
			};\
		</reftext>
		<prose>
			A function to create an empty root trie node
			is created it's name being the concatenation
			of the name given for the trie node with _new.
		</prose>
		<reftext>\
			struct name* name##_new() {\
				struct name *rtn = malloc(sizeof(struct name));\
				rtn->has_value = 0;\
				for (int i = 0; i <lt/> 256; i++)\
					rtn->transition[i] = NULL;\
				return rtn;\
			}\
		</reftext>
		<prose>
			A function to search the trie from the given root
			node is created. Upon completion, it returns a
			pointer to the value associated with the given
			byte sequence, or NULL if no such value exists.
		</prose>
		<reftext>\
			value_type* name##_search(struct name *rt, const char *beg, const char *end) {\
				for (;beg != end; beg++) {\
					rt = rt->transition[(int)*beg];\
					if (rt == NULL) return NULL;\
				}\
				if (rt->has_value) return <amp/>(rt->value);\
				else return NULL;\
			}\
		</reftext>
		<prose>
			A function to set the value associated with
			the given byte sequence from the given trie root 
			node is created. The function returns a pointer
			to the value in it's new place.
		</prose>
		<reftext>\
			value_type *name##_set(struct name *rt, const char *beg, const char *end, value_type v) {\
				for (;beg != end; beg++) {\
					if (rt->transition[(int)*beg] != NULL) {\
						rt = rt->transition[(int)*beg];\
					} else {\
						struct name *t = name##_new();\
						rt->transition[(int)*beg] = t;\
						rt = t;\
					}\
				}\
				rt->has_value = true;\
				rt->value = v;\
				return <amp/>(rt->value);\
			}\
		</reftext>
		<prose>
			A function that forces a mapping from the given
			byte sequence to a value is created. If there already
			was a value associated with the given byte sequence, then
			the function simply returns a pointer to that value. 
			Otherwise, the byte sequence is set to map to the value
			generated by the provided value_type constructor function.
		</prose>
		<reftext>\
			value_type *name##_get(struct name *rt, const char *beg, const char *end, value_type (*vcons)()) {\
				for (;beg != end; beg++) {\
					if (rt->transition[(int)*beg] != NULL) {\
						rt = rt->transition[(int)*beg];\
					} else {\
						struct name *t = name##_new();\
						rt->transition[(int)*beg] = t;\
						rt = t;\
					}\
				}\
				if (!rt->has_value) {\
					rt->value = vcons();\
					rt->has_value = true;\
				}\
				return <amp/>(rt->value);\
			}\
		</reftext>
	</deftext>
</root>
